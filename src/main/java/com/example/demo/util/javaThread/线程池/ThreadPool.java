package com.example.demo.util.javaThread.线程池;

public class ThreadPool {
    /**
     * 四种线程池
     *
     * Java里面线程池的顶级接口是Executor，但严格意义上讲Executor并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是ExecutorService
     *
     * newCachedThreadPool
     * 创建一个可根据需要创建新线程的线程池
     * 但是在以前构造的线程可用时将重用它们
     * 对于执行很多短期异步任务的程序而言，这种线程池通常可提高程序性能
     * 调用execute将重用以前构造的线程（如果线程可用）。如果现有的线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有60秒未被使用的线程。
     * 长时间保持空闲的线程池不会使用任何资源
     *
     * newFixedThreadPool
     * 创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。在任意点，在大多数nThreads线程会处于处理任务的活动状态。
     * 如果在所有线程处于活动状态时提交附加任务，则在有可用线程之前，附加任务将在队列中等待。
     * 如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线程将代替它执行后续的任务（如果需要）。
     * 在某个线程被显式地关闭之前，池中的线程将一直存在。
     *
     * newScheduledThreadPool
     * 创建一个线程池，可安排在给定延迟后运行命令或者定期的执行
     *
     * newSingleThreadExecutor
     */
}
